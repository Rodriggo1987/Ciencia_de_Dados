# -*- coding: utf-8 -*-
"""Livrodatasciencedozeroipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1otO4bdVHyuo9wlrhELfAeyQTWW4ruo7A
"""

from matplotlib import pyplot as plt
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

years = [1950, 1960, 1970, 1980, 1990, 2000, 2010]
gdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]

#criar um grafico de linha, anos no eixo x, gdp no eixo 

plt.plot(years, gdp, color='green', marker='o', linestyle='solid')

#Adcionar um titulo

plt.title("GDP Nominal")

"""**Outro grafico**

---


"""

movies = ["Annnie Hall", "Ben-Hur", "Casablanca", "Gandhi", "West Side Story"]
num_oscars = [5,11,3,8,10]

#barras possuem o tamnho padrão de 0.8, então adcionameremos 0.1 as
# coordenadas á esquerda para que cada barra seja centralizada. 
xs =  [i + 0.1 for i, _ in enumerate(movies)]

# As barras do grafico com as coordenadas z á esquerda [xs], alturas [num_oscars]

plt.bar(xs, num_oscars)
plt.ylabel("# de premiações")
plt.title("Meus Filmes Favoritos")

#NOMEIA O EIXO x COM  NOMES DE FILMES NA BARRA CENTRAL 

plt.xticks([i + 0.5 for i, _ in enumerate(movies)], movies)
plt.show()

"""**FIGURA DE GRÁFICO DE BARRAS SIMPLES. **"""

grades = [83, 95, 91, 87, 70, 0, 85, 82, 100, 67, 73, 77, 0]
decile = lambda grade: grade // 10 * 10
histogram = Counter(decile(grade) for grade in grades)

plt.bar([x -4 for x in histogram.keys()],  # move cada barra para a esquerda em 4
        histogram.values(),                # da para cada barra sua altura correta
        8)                                 # da para cada barra a largura de 8


plt.axis([-5, 105, 0, 5])  # eixo x de -5 até 105,
                           # eixo y de 0 até 5 


plt.xticks([10 * i for i in ranger(11)])           # rótulos do eixo x em 0, 10, ... ,100
plt.xlabel("Decil")
plt.ylabel("# de Alunos")
plt.title("Distribuição das Notas do Teste 1")
plt.show()

""" **GRÁFICO DE LINHAS**"""

variance     = [1, 2, 4, 8, 16, 32, 64, 128, 256]
bias_squared = [256, 128, 64, 32, 16, 8, 4, 2, 1]
total_error  = [x + y for x, y in zip(variance,bias_squared)]
xs = [i for i, _ in enumerate(variance)]

#Podemos fazer multiplas chamdas para 
#Para mostrar multiplas series no mesmo gráfico
plt.plot(xs, variance,     'g-',   label='variance')    #linha verde sólida
plt.plot(xs, bias_squared, 'r-.',  label='bias^2')      #linha com linha de ponto tracejado vermelho
plt.plot(xs, total_error,  'b:',   label='total error') #linha com pontilhado azul

#loc=9 significa = "top center"
plt.legend(loc=9)
plt.xlabel("Complexidade do modelo")
plt.title("Compromisso entre Polarização e Varianca")
plt.show()

"""**GRÁFICO DE DISPERSÃO** """

friends = [70, 65, 72, 63, 71, 64, 60, 64, 67]
minutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]
labels =  ['a', 'b', 'c', 'd', 'f', 'h', 'i']

plt.scatter(friends, minutes)

# nomeia cada posição 

for label, friend_count, minute_count in zip(labels, friends, minutes):
     plt.annotate(label, 
                  xy=(friend_count, minute_count),
                  xytext=(5, -5),
                  textcoords= 'offset points')
     plt.title("Minutos Diarios vs. Número de Amigos")  
plt.xlabel("# de amigos")   
plt.ylabel("Minutos Diários passados no site")
plt.show()

"""**Estatisticas**"""

num_amigos = [ 100, 49, 41, 40, 25 ]

amigos_counts = Counter(num_amigos)
xs = ranger(101)
ys = [amigos_counts[x] for x in xs]
plt.bar(xs, ys)
plt.axis([0, 101, 0, 25])
plt.title("Histograma da contagem de amigos")
plt.xlabel("# de amigos")
plt.ylabel("# de pessoas")
plt.show()