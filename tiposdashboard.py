# -*- coding: utf-8 -*-
"""tiposdashboard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uZzFNhFO25BTOH2OhKLlBpc0lvbqkUdk

**Abaixo foi importada as bibliotecas utilizadas **
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""**Gráfico de Linhas**


"""

# Eixo_x, Eixo_y
plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
plt.show()

"""* **O eixo x recebe a primeira lista de valores e o y a segunda lista.** *


"""

import matplotlib.pyplot as plt
plt.plot([1, 2, 3, 4],[1, 4, 9, 16])
plt.ylabel('Eixo Y')
plt.xlabel('Eixo X')
plt.show()

"""**Permiti definir um rótulo qualquer para cada um dos eixos.**

**Alterando a forma dos pontos:**
"""

# plot(x, y)
plt.plot([1, 2, 3, 4], [1, 4, 9, 16],'o')
plt.show()

"""**Definindo limites de visualização dos eixos x e y:**


"""

plt.plot([1, 2, 3, 4], [1, 4, 9, 16],'o')
plt.axis([0, 6, 0, 20]) # [xmin, xmax, ymin, ymax]
plt.show()

"""**Importa a biblioteca numpy:**


"""

import numpy as np

"""**Plot duas séries de dados, no caso x1 e y2 e x3 e y3:**


"""

x1=np.array([1,2,3,4,5,6,7,8,9,11])

x2 = x1
y2 = x1**2             # Numero elevado ao quadrado

x3 = x1
y3 = x1**3             # Numero elevado cubo

plt.plot(x1, y2 ,'g--', x2, y3, 'bs')

plt.show()

"""**Plotando gráfico de barras verticais o gráfico de colunas:**



"""

grupos = ['Produto A', 'Produto B', 'Produto C']
valores = [1, 10, 100]
plt.bar(grupos, valores)
plt.show()

"""**Plota gráficos de Barras juntas**

"""

#Customizando layouts
plt.style.use("ggplot")


# Define as configurações dos plots
# Cada plot terá o mesmo tamanho de figuras (10,5)
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10,5))

# Dados para cada subplot
ax1.bar([1,2,3],[3,4,5])
ax2.barh([0.5,1,2.5],[0,1,2])

ax1.set(title="Gráfico de Barras Verticais", xlabel="Eixo x", ylabel=" Eixo y")
ax2.set(title="Gráfico de Barras Horizontais", xlabel="Eixo x", ylabel="Eixo y")

plt.show()

#Define as configurações dos plots
# Cada plot terá o mesmo tamanho de figuras (10,5)
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10,5))

# Dados para cada subplot
ax1.bar([1,2,3],[3,4,5],color='#00BFFF')
ax2.barh([0.5,1,2.5],[0,1,2], color='#00FF00')

ax1.set(title="Gráfico de Barras Verticais", xlabel="Eixo x", ylabel=" Eixo y")
ax2.set(title="Gráfico de Barras Horizontais", xlabel="Eixo x", ylabel="Eixo y")

plt.show()

"""**Gráfico de barras aninhadas**

"""

# Quantidade de vendas para o Produto A
valores_produto_A = [6,7,8,4,4]

# Quantidade de vendas para o Produto B
valores_produto_B = [3,12,3,4.1,6]

# Cria eixo x para produto A e produto B com uma separação de 0.25 entre as barras
x1 =  np.arange(len(valores_produto_A))
x2 = [x + 0.25 for x in x1]

# Plota as barras
plt.bar(x1, valores_produto_A, width=0.25, label = 'Produto A', color = 'b')
plt.bar(x2, valores_produto_B, width=0.25, label = 'Produto B', color = 'y')

# coloca o nome dos meses como label do eixo x
meses = ['Agosto','Setembro','Outubro','Novembro','Dezembro']
plt.xticks([x + 0.25 for x in range(len(valores_produto_A))], meses)

# inseri uma legenda no gráfico
plt.legend()

plt.title("Quantidade de Vendas")
plt.show()

"""**Gráfico de barras horizontais**

"""

grupos = ['Produto A', 'Produto B', 'Produto C']
valores = [1, 10, 100]
plt.barh(grupos, valores)
plt.show()

"""Rotacionando Labels:


"""

grupos = ['Produto A', 'Produto B', 'Produto C']
valores = [1, 10, 100]

plt.barh(grupos, valores)
plt.barh (grupos, valores)
plt.yticks(rotation=45)

plt.show()

"""**Gráfico de Pizza**

"""

vendas = [3000, 2300, 1000, 500]
labels = ['E-commerce', 'Loja Física', 'e-mail', 'Marketplace']

plt.pie(vendas, labels=labels)
plt.show()

"""**Customizando gráfico de pizza:**


"""

vendas = [3000, 2300, 1000, 500]
labels = ['E-commerce', 'Loja Física', 'e-mail', 'Marketplace']

# define o nível de separabilidade entre as partes, ordem do vetor representa as partes
explode = (0.1, 0, 0, 0) 

# define o formato de visualização com saída em 1.1%%, sombras e a separação entre as partes
plt.pie(vendas, labels=labels, autopct='%1.1f%%', shadow=True, explode=explode)

# inseri a legenda e a localização da legenda.
plt.legend(labels, loc=3)


# define que o gráfico será plotado em circulo
plt.axis('equal')

plt.show()

"""**Adiciona textos em gráficos**

"""

# 100 valores no intervalo de 0 a 2.
x = np.linspace(0, 2, num=100)

# define a legenda e tamanho de linhas
plt.plot(x, x, label='linear')

plt.plot(x, x**2, label='quadratico', linewidth=5)

plt.xlabel('x label')
plt.ylabel('y label')

plt.title("Gráfico de Linhas Simples")

# Exibe a legenda e por padrão usa o label de cada plot.
plt.legend()

# Configurações do texto
plt.text(1.00, 1.0, "Cruzamento das Linhas", fontsize=8, horizontalalignment='right')

plt.show()

"""**Plotando Histogramas**

"""